name: üöÄ Deploy vk-normalizer

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag to deploy (defaults to latest)"
        required: false
        default: "latest"

jobs:
  deploy:
    name: üîÑ Deploy via Helm
    runs-on: self-hosted

    env:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    steps:
      - name: üßæ Checkout repo
        uses: actions/checkout@v4

      - name: üîß Ensure namespace
        run: |
          kubectl get ns app || kubectl create ns app

      - name: üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è GitHub Secrets
        env:
          BOOTSTRAP: ${{ secrets.VK_NORM_KAFKA_BOOTSTRAP_SERVERS_VALUE }}
          GROUP_ID: ${{ secrets.VK_NORM_KAFKA_GROUP_ID }}
          SASL_USER: ${{ secrets.VK_NORM_KAFKA_SASL_USERNAME }}
          SASL_PASS: ${{ secrets.VK_NORM_KAFKA_SASL_PASSWORD }}
          TOPIC_VK: ${{ secrets.VK_NORM_KAFKA_VK_MESS_TOPIC_NAME }}
          TOPIC_NORMALIZED: ${{ secrets.VK_NORM_KAFKA_NORMALIZER_TOPIC_NAME }}
          S3_ENDPOINT: ${{ secrets.VK_NORM_S3_ENDPOINT }}
          S3_ACCESS: ${{ secrets.VK_NORM_S3_ACCESS_KEY }}
          S3_SECRET: ${{ secrets.VK_NORM_S3_SECRET_KEY }}
          S3_BUCKET: ${{ secrets.VK_NORM_S3_BUCKET }}
          S3_USE_SSL: ${{ secrets.VK_NORM_S3_USE_SSL }}
        run: |
          set -euo pipefail
          missing=()
          for var in BOOTSTRAP GROUP_ID SASL_USER SASL_PASS TOPIC_VK TOPIC_NORMALIZED S3_ENDPOINT S3_ACCESS S3_SECRET S3_BUCKET S3_USE_SSL; do
            if [ -z "${!var:-}" ]; then
              missing+=("${var}")
            fi
          done
          if [ ${#missing[@]} -gt 0 ]; then
            echo "‚ùå –ü—É—Å—Ç—ã–µ GitHub Secrets: ${missing[*]}"
            echo "–î–æ–±–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ workflow."
            exit 1
          fi
          echo "‚úÖ –í—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ GitHub Secrets –∑–∞–¥–∞–Ω—ã."

      - name: üîê Apply/update env Secret
        env:
          BOOTSTRAP: ${{ secrets.VK_NORM_KAFKA_BOOTSTRAP_SERVERS_VALUE }}
          GROUP_ID: ${{ secrets.VK_NORM_KAFKA_GROUP_ID }}
          SASL_USER: ${{ secrets.VK_NORM_KAFKA_SASL_USERNAME }}
          SASL_PASS: ${{ secrets.VK_NORM_KAFKA_SASL_PASSWORD }}
          TOPIC_VK: ${{ secrets.VK_NORM_KAFKA_VK_MESS_TOPIC_NAME }}
          TOPIC_NORMALIZED: ${{ secrets.VK_NORM_KAFKA_NORMALIZER_TOPIC_NAME }}
          S3_ENDPOINT: ${{ secrets.VK_NORM_S3_ENDPOINT }}
          S3_ACCESS: ${{ secrets.VK_NORM_S3_ACCESS_KEY }}
          S3_SECRET: ${{ secrets.VK_NORM_S3_SECRET_KEY }}
          S3_BUCKET: ${{ secrets.VK_NORM_S3_BUCKET }}
          S3_USE_SSL: ${{ secrets.VK_NORM_S3_USE_SSL }}
        run: |
          kubectl -n app create secret generic vk-normalizer-env \
            --from-literal=VK_NORM_KAFKA_BOOTSTRAP_SERVERS_VALUE="${BOOTSTRAP}" \
            --from-literal=VK_NORM_KAFKA_GROUP_ID="${GROUP_ID}" \
            --from-literal=VK_NORM_KAFKA_SASL_USERNAME="${SASL_USER}" \
            --from-literal=VK_NORM_KAFKA_SASL_PASSWORD="${SASL_PASS}" \
            --from-literal=VK_NORM_KAFKA_VK_MESS_TOPIC_NAME="${TOPIC_VK}" \
            --from-literal=VK_NORM_KAFKA_NORMALIZER_TOPIC_NAME="${TOPIC_NORMALIZED}" \
            --from-literal=VK_NORM_S3_ENDPOINT="${S3_ENDPOINT}" \
            --from-literal=VK_NORM_S3_ACCESS_KEY="${S3_ACCESS}" \
            --from-literal=VK_NORM_S3_SECRET_KEY="${S3_SECRET}" \
            --from-literal=VK_NORM_S3_BUCKET="${S3_BUCKET}" \
            --from-literal=VK_NORM_S3_USE_SSL="${S3_USE_SSL}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: üì§ Apply manifests
        run: |
          kubectl -n app apply -f k8s/vk-normalizer/deploy.yaml

      - name: üñº Update image tag
        env:
          IMAGE_TAG: ${{ github.event.inputs.image_tag }}
        run: |
          TAG=${IMAGE_TAG:-latest}
          REPO=ghcr.io/pufferfish-io/vk-normalizer
          IMAGE="${REPO}:${TAG}"
          echo "Deploying image: ${IMAGE}"
          kubectl -n app set image deployment/vk-normalizer vk-normalizer=${IMAGE}

      - name: üîé Rollout status
        run: |
          set -e
          kubectl -n app rollout status deployment/vk-normalizer --timeout=120s
          kubectl -n app get pods -o wide

      - name: üìù Recent logs (best effort)
        if: ${{ always() }}
        continue-on-error: true
        run: |
          kubectl -n app logs deploy/vk-normalizer --tail=200
