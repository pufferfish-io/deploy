name: üöÄ Deploy vk-response-preparer

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag to deploy (defaults to latest)"
        required: false
        default: "latest"

jobs:
  deploy:
    name: üîÑ Deploy via kubectl
    runs-on: self-hosted

    env:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    steps:
      - name: üßæ Checkout repo
        uses: actions/checkout@v4

      - name: üîß Ensure namespace
        run: |
          kubectl get ns app || kubectl create ns app

      - name: üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å GitHub Secrets (env)
        env:
          BOOTSTRAP: ${{ secrets.VKRP_KAFKA_BOOTSTRAP_SERVERS_VALUE }}
          VK_TOPIC: ${{ secrets.VKRP_KAFKA_VK_MESSAGE_TOPIC_NAME }}
          RESP_TOPIC: ${{ secrets.VKRP_KAFKA_RESPONSE_MESSAGE_TOPIC_NAME }}
          GROUP_ID: ${{ secrets.VKRP_KAFKA_RESPONSE_MESSAGE_GROUP_ID }}
          SASL_USER: ${{ secrets.VKRP_KAFKA_SASL_USERNAME }}
          SASL_PASS: ${{ secrets.VKRP_KAFKA_SASL_PASSWORD }}
          CLIENT_ID: ${{ secrets.VKRP_KAFKA_CLIENT_ID }}
          SERVER_PORT: ${{ secrets.VKRP_SERVER_PORT }}
        run: |
          set -euo pipefail
          echo "–¢—Ä–µ–±—É–µ–º—ã–µ –∫–ª—é—á–∏ (GitHub Secrets):"
          echo "- VKRP_KAFKA_BOOTSTRAP_SERVERS_VALUE"
          echo "- VKRP_KAFKA_VK_MESSAGE_TOPIC_NAME"
          echo "- VKRP_KAFKA_RESPONSE_MESSAGE_TOPIC_NAME"
          echo "- VKRP_KAFKA_RESPONSE_MESSAGE_GROUP_ID"
          echo "- VKRP_KAFKA_SASL_USERNAME"
          echo "- VKRP_KAFKA_SASL_PASSWORD"
          echo "- VKRP_KAFKA_CLIENT_ID"
          echo "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: VKRP_SERVER_PORT (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8083)"

          pairs=(
            "BOOTSTRAP=VKRP_KAFKA_BOOTSTRAP_SERVERS_VALUE"
            "VK_TOPIC=VKRP_KAFKA_VK_MESSAGE_TOPIC_NAME"
            "RESP_TOPIC=VKRP_KAFKA_RESPONSE_MESSAGE_TOPIC_NAME"
            "GROUP_ID=VKRP_KAFKA_RESPONSE_MESSAGE_GROUP_ID"
            "SASL_USER=VKRP_KAFKA_SASL_USERNAME"
            "SASL_PASS=VKRP_KAFKA_SASL_PASSWORD"
            "CLIENT_ID=VKRP_KAFKA_CLIENT_ID"
          )

          missing=()
          for pair in "${pairs[@]}"; do
            envvar="${pair%%=*}"
            secret="${pair#*=}"
            if [ -z "${!envvar:-}" ]; then
              echo "‚úó ${secret}: –ü–£–°–¢–û"
              missing+=("${secret}")
            else
              echo "‚úì ${secret}: OK"
            fi
          done

          if [ -z "${SERVER_PORT:-}" ]; then
            echo "‚Ä¢ VKRP_SERVER_PORT: –Ω–µ –∑–∞–¥–∞–Ω (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ 8083)"
          else
            echo "‚Ä¢ VKRP_SERVER_PORT: –∑–∞–¥–∞–Ω"
          fi

          if [ ${#missing[@]} -gt 0 ]; then
            echo "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç/–ø—É—Å—Ç—ã–µ Secrets: ${missing[*]}"
            echo "–î–æ–±–∞–≤—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ Settings ‚Üí Secrets and variables ‚Üí Actions –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ workflow."
            exit 1
          fi

      - name: üîê Apply/update env Secret
        env:
          BOOTSTRAP: ${{ secrets.VKRP_KAFKA_BOOTSTRAP_SERVERS_VALUE }}
          VK_TOPIC: ${{ secrets.VKRP_KAFKA_VK_MESSAGE_TOPIC_NAME }}
          RESP_TOPIC: ${{ secrets.VKRP_KAFKA_RESPONSE_MESSAGE_TOPIC_NAME }}
          GROUP_ID: ${{ secrets.VKRP_KAFKA_RESPONSE_MESSAGE_GROUP_ID }}
          SASL_USER: ${{ secrets.VKRP_KAFKA_SASL_USERNAME }}
          SASL_PASS: ${{ secrets.VKRP_KAFKA_SASL_PASSWORD }}
          CLIENT_ID: ${{ secrets.VKRP_KAFKA_CLIENT_ID }}
          SERVER_PORT: ${{ secrets.VKRP_SERVER_PORT }}
        run: |
          kubectl -n app create secret generic vk-response-preparer-env \
            --from-literal=VKRP_KAFKA_BOOTSTRAP_SERVERS_VALUE="${BOOTSTRAP}" \
            --from-literal=VKRP_KAFKA_VK_MESSAGE_TOPIC_NAME="${VK_TOPIC}" \
            --from-literal=VKRP_KAFKA_RESPONSE_MESSAGE_TOPIC_NAME="${RESP_TOPIC}" \
            --from-literal=VKRP_KAFKA_RESPONSE_MESSAGE_GROUP_ID="${GROUP_ID}" \
            --from-literal=VKRP_KAFKA_SASL_USERNAME="${SASL_USER}" \
            --from-literal=VKRP_KAFKA_SASL_PASSWORD="${SASL_PASS}" \
            --from-literal=VKRP_KAFKA_CLIENT_ID="${CLIENT_ID}" \
            --from-literal=VKRP_SERVER_PORT="${SERVER_PORT:-8083}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: üì§ Apply manifests
        run: |
          kubectl -n app apply -f k8s/vk-response-preparer/deploy.yaml

      - name: üñº Update image tag
        env:
          IMAGE_TAG: ${{ github.event.inputs.image_tag }}
        run: |
          TAG=${IMAGE_TAG:-latest}
          REPO=ghcr.io/pufferfish-io/vk-response-preparer
          IMAGE="${REPO}:${TAG}"
          echo "Deploying image: ${IMAGE}"
          kubectl -n app set image deployment/vk-response-preparer vk-response-preparer=${IMAGE}

      - name: üîé Rollout status
        run: |
          set -e
          kubectl -n app rollout status deployment/vk-response-preparer --timeout=120s
          kubectl -n app get pods -o wide

      - name: üìù Recent logs (best effort)
        continue-on-error: true
        run: |
          kubectl -n app logs deploy/vk-response-preparer --tail=200
